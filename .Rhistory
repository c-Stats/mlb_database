keys <- data.table::key(DB[[s]][[lineup$teams[[i]]]][[j]])
if(is.null(keys) | length(keys) > 1){
data.table::setkey(DB[[s]][[lineup$teams[[i]]]][[j]], "Name")
} else if(keys != "Name"){
data.table::setkey(DB[[s]][[lineup$teams[[i]]]][[j]], "Name")
}
}
}
#Get the match number
match_n <- DB[[season]][[lineup$teams[[i]]]]$Pitch[Date < date]
match_n <- match_n[which.max(Nth_match)]$Nth_match[1] + 1
frames[[i]] <- list()
n_match_total <- c(0)
#Query date range
#Announced players
dummy <- list()
for(s in seasons){
dummy[[length(dummy) + 1]] <- DB[[s]][[lineup$teams[[i]]]]$Bat[.(lineup[[i]]$bat)]
dummy[[length(dummy)]] <- dummy[[length(dummy)]][complete.cases(dummy[[length(dummy)]]), ]
dummy[[length(dummy)]][, Nth_match_total := Nth_match + sum(n_match_total)]
if(s == season){match_n <- match_n + sum(n_match_total)}
n_match_total <- c(n_match_total, max(dummy[[length(dummy)]]$Nth_match))
}
frames[[i]]$Bat_A <- dplyr::bind_rows(dummy)
frames[[i]]$Bat_A <- frames[[i]]$Bat_A[Nth_match_total %between% c(match_n - params$n_match_bat, match_n - 1)]
#Query date range
#Unannounced players
dummy <- list()
k <- 1
for(s in seasons){
dummy[[length(dummy) + 1]] <- DB[[s]][[lineup$teams[[i]]]]$Bat_Relief[Date < date]
dummy[[length(dummy)]] <- dummy[[length(dummy)]][complete.cases(dummy[[length(dummy)]]), ]
dummy[[length(dummy)]][, Nth_match_total := Nth_match + n_match_total[k]]
k <- k + 1
}
frames[[i]]$Bat_UA <- dplyr::bind_rows(dummy)
data.table::setkey(frames[[i]]$Bat_UA, "Name")
frames[[i]]$Bat_UA <- frames[[i]]$Bat_UA[!.(lineup[[i]]$bat)]
frames[[i]]$Bat_UA <- frames[[i]]$Bat_UA[Nth_match_total %between% c(match_n - params$n_match_bat, match_n - 1)]
#Get the most recent Geom_MLE variable for unanounced players
data.table::setkey(frames[[i]]$Bat_UA, NULL)
data.table::setorder(frames[[i]]$Bat_UA, Date)
cols <- match(c("Geom_MLE", "Nth_match_total"), colnames(frames[[i]]$Bat_UA))
n_match_not_played <- frames[[i]]$Bat_UA[, lapply(.SD, last), .SDcols = cols, by = Name]
n_match_not_played[, Mnp := match_n - Nth_match_total]
n_match_not_played[Geom_MLE == 1, Geom_MLE := 0.5]
n_match_not_played[Geom_MLE == 0, Geom_MLE := 10^(-6)]
n_match_not_played[, P_val := 1 - pgeom(Mnp, Geom_MLE)]
n_match_not_played <- n_match_not_played[P_val >= 0.05 & Mnp <= 20]
data.table::setkeyv(n_match_not_played, c("Name"))
data.table::setkeyv(frames[[i]]$Bat_UA, c("Name"))
frames[[i]]$Bat_UA <- frames[[i]]$Bat_UA[.(unique(n_match_not_played$Name))]
frames[[i]]$Bat_UA[n_match_not_played, Geom_MLE := i.Geom_MLE]
original_weight_sum <- sum(frames[[i]]$Bat_UA$Weight)
frames[[i]]$Bat_UA[, Weight := Weight * Geom_MLE]
correcting_factor <- original_weight_sum / sum(frames[[i]]$Bat_UA$Weight)
frames[[i]]$Bat_UA[, Weight := Weight * (correcting_factor)]
#Compute the average, by player
#Then the weighted average
index_var <- which(sapply(frames[[i]]$Bat_A, is.numeric))
index_var <- index_var[which(names(index_var) != "ID" & names(index_var) != "Season")]
var_names <- names(index_var)
#For starting players, compute the weights given they were announced
starting_weights <- frames[[i]]$Bat_A[Announced == "Yes", c("Name","Weight"), with = FALSE][, lapply(.SD, weighted.mean, w = Weight), .SDcols = c("Weight"), by = Name]
data.table::setkey(starting_weights, "Name")
frames[[i]]$Bat_A[, (var_names) := lapply(.SD, as.numeric), .SDcols = index_var]
frames[[i]]$Bat_A <- frames[[i]]$Bat_A[, lapply(.SD, mean), .SDcols = index_var, by = Name]
data.table::setkey(frames[[i]]$Bat_A, "Name")
frames[[i]]$Bat_A[starting_weights, Weight := i.Weight]
frames[[i]]$Bat_A[, Name := NULL]
frames[[i]]$Bat_A <- frames[[i]]$Bat_A[, lapply(.SD, weighted.mean, w = Weight), .SDcols = c(1:ncol(frames[[i]]$Bat_A))]
frames[[i]]$Bat_UA[, (var_names) := lapply(.SD, as.numeric), .SDcols = index_var]
frames[[i]]$Bat_UA <- frames[[i]]$Bat_UA[, lapply(.SD, mean), .SDcols = index_var, by = Name]
frames[[i]]$Bat_UA[, Name := NULL]
frames[[i]]$Bat_UA <- frames[[i]]$Bat_UA[, lapply(.SD, weighted.mean, w = Weight), .SDcols = c(1:ncol(frames[[i]]$Bat_A))]
#Combine the A and UA stats
to_del <- c("Nth_match", "Geom_MLE", "Nth_match_total")
frames[[i]]$Bat <- dplyr::bind_rows(frames[[i]])[, lapply(.SD, weighted.mean, w = Weight), .SDcols = var_names] %>%
.[, (to_del) := NULL]
frames[[i]]$Bat_UA <- NULL
frames[[i]]$Bat_A <- NULL
suffix <- paste("_BAT_", toupper(names(lineup$teams)[i]), sep = "")
colnames(frames[[i]]$Bat) <- paste(colnames(frames[[i]]$Bat), suffix, sep = "")
#Query date range
#Announced players
dummy <- list()
k <- 1
for(s in seasons){
dummy[[length(dummy) + 1]] <- DB[[s]][[lineup$teams[[i]]]]$Pitch[.(lineup[[i]]$pitch)]
dummy[[length(dummy)]] <- dummy[[length(dummy)]][complete.cases(dummy[[length(dummy)]]), ]
dummy[[length(dummy)]][, Nth_match_total := Nth_match + n_match_total[k]]
k <- k + 1
}
frames[[i]]$Pitch_A <- dplyr::bind_rows(dummy)
frames[[i]]$Pitch_A <- frames[[i]]$Pitch_A[Nth_match_total %between% c(match_n - params$n_match_pitch, match_n - 1)]
#Query date range
#Unannounced players
dummy <- list()
k <- 1
for(s in seasons){
dummy[[length(dummy) + 1]] <- DB[[s]][[lineup$teams[[i]]]]$Pitch_Relief[Date < date]
dummy[[length(dummy)]] <- dummy[[length(dummy)]][complete.cases(dummy[[length(dummy)]]), ]
dummy[[length(dummy)]][, Nth_match_total := Nth_match + n_match_total[k]]
k <- k + 1
}
frames[[i]]$Pitch_UA <- dplyr::bind_rows(dummy)
data.table::setkey(frames[[i]]$Pitch_UA, "Name")
frames[[i]]$Pitch_UA <- frames[[i]]$Pitch_UA[!.(lineup[[i]]$pitch)]
frames[[i]]$Pitch_UA <- frames[[i]]$Pitch_UA[Nth_match_total %between% c(match_n - params$n_match_pitch, match_n - 1)]
#Get the most recent Geom_MLE variable for unanounced players
data.table::setkey(frames[[i]]$Pitch_UA, NULL)
data.table::setorder(frames[[i]]$Pitch_UA, Date)
cols <- match(c("Geom_MLE", "Nth_match_total"), colnames(frames[[i]]$Pitch_UA))
n_match_not_played <- frames[[i]]$Pitch_UA[, lapply(.SD, last), .SDcols = cols, by = Name]
n_match_not_played[, Mnp := match_n - Nth_match_total]
n_match_not_played[Geom_MLE == 1, Geom_MLE := 0.5]
n_match_not_played[Geom_MLE == 0, Geom_MLE := 10^(-6)]
n_match_not_played[, P_val := 1 - pgeom(Mnp, Geom_MLE)]
n_match_not_played <- n_match_not_played[P_val >= 0.05 & Mnp <= 20]
data.table::setkeyv(n_match_not_played, c("Name"))
data.table::setkeyv(frames[[i]]$Pitch_UA, c("Name"))
frames[[i]]$Pitch_UA <- frames[[i]]$Pitch_UA[.(unique(n_match_not_played$Name))]
frames[[i]]$Pitch_UA[n_match_not_played, Geom_MLE := i.Geom_MLE]
original_weight_sum <- sum(frames[[i]]$Pitch_UA$Weight)
frames[[i]]$Pitch_UA[, Weight := Weight * Geom_MLE]
correcting_factor <- original_weight_sum / sum(frames[[i]]$Pitch_UA$Weight)
frames[[i]]$Pitch_UA[, Weight := Weight * (correcting_factor)]
#Compute the average, by player
#Then the weighted average
index_var <- which(sapply(frames[[i]]$Pitch_A, is.numeric))
index_var <- index_var[which(names(index_var) != "ID" & names(index_var) != "Season")]
var_names <- names(index_var)
#For starting players, compute the weights given they were announced
starting_weights <- frames[[i]]$Pitch_A[Announced == "Yes", c("Name","Weight"), with = FALSE][, lapply(.SD, weighted.mean, w = Weight), .SDcols = c("Weight"), by = Name]
data.table::setkey(starting_weights, "Name")
frames[[i]]$Pitch_A[, (var_names) := lapply(.SD, as.numeric), .SDcols = index_var]
frames[[i]]$Pitch_A <- frames[[i]]$Pitch_A[, lapply(.SD, mean), .SDcols = index_var, by = Name]
data.table::setkey(frames[[i]]$Pitch_A, "Name")
frames[[i]]$Pitch_A[starting_weights, Weight := i.Weight]
frames[[i]]$Pitch_A[, Name := NULL]
frames[[i]]$Pitch_UA[, (var_names) := lapply(.SD, as.numeric), .SDcols = index_var]
frames[[i]]$Pitch_UA <- frames[[i]]$Pitch_UA[, lapply(.SD, mean), .SDcols = index_var, by = Name]
frames[[i]]$Pitch_UA[, Name := NULL]
frames[[i]]$Pitch_UA <- frames[[i]]$Pitch_UA[, lapply(.SD, weighted.mean, w = Weight), .SDcols = c(1:ncol(frames[[i]]$Pitch_A))]
#Combine the A and UA stats
to_del <- c("Nth_match", "Geom_MLE", "Nth_match_total")
frames[[i]]$Pitch <- dplyr::bind_rows(frames[[i]][-1])[, lapply(.SD, weighted.mean, w = Weight), .SDcols = var_names] %>%
.[, (to_del) := NULL]
frames[[i]]$Pitch_UA <- NULL
frames[[i]]$Pitch_A <- NULL
suffix <- paste("_PITCH_", toupper(names(lineup$teams)[i]), sep = "")
colnames(frames[[i]]$Pitch) <- paste(colnames(frames[[i]]$Pitch), suffix, sep = "")
#Get the team info
frames[[i]]$Team_Stats <- DB[[season]][[lineup$teams[[i]]]]$Team_Stats[Date < date, c("Date", "Win_p", "PPG", "PPG_vs", "PPG_diff", "Streak")]
frames[[i]]$Team_Stats <- frames[[i]]$Team_Stats[which.max(Date)]
frames[[i]]$Team_Stats[, Date := NULL]
colnames(frames[[i]]$Team_Stats) <- paste(colnames(frames[[i]]$Team_Stats), "TEAM_STATS", toupper(names(lineup$teams)[i]), sep = "_")
frames[[i]] <- bind_cols(frames[[i]])
}
?between
c(1,2,3,4,5,6,7,8) data.table::`%between%`(3, 5)
update_database("D:/MLB")
usethis::use_package("anytime")
usethis::use_package("magrittr")
document()
document()
warnings()
document()
warnings()
document()
document()
document()
library(mlbDatabase)
update_database("D:/MLB")
data.table::":="
document()
library(devtools)
document()
document()
update_database("D:/MLB")
library(mlbDatabase)
library(mlbDatabase)
update_database("D:/MLB")
library(data.table)
update_database("D:/MLB")
document()
library(devtools)
document()
document()
document()
document()
update_database("D:/MLB")
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/Seasonal_Database.rds", sep = "")
DB <- readRDS(load_path)
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/DB_Scores.rds", sep = "")
scores <- readRDS(load_path)
################################################
################ INITIALISATION ################
################################################
path = "D:/MLB"
n <- 100
params <- list()
params$n_season <- 2
params$n_match_bat <- 20
params$n_match_pitch <- 40
################################################
################################################
################################################
################ LIBRARIES      ################
################################################
library("stringr")
library("data.table")
library("dplyr")
################################################
################################################
################################################
################ RETRIEVE DATA  ################
################################################
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/Seasonal_Database.rds", sep = "")
DB <- readRDS(load_path)
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/DB_Scores.rds", sep = "")
scores <- readRDS(load_path)
query_stats(id = 100)
query_stats(date = NULL, lineup = NULL, params = NULL, id = 100)
query_stats(date = NULL, lineup = NULL, params = NULL, id = 1000)
params <- list()
params$n_season <- 2
params$n_match_bat <- 20
params$n_match_pitch <- 40
query_stats(date = NULL, lineup = NULL, params = params, id = 1000)
x <- query_stats(date = NULL, lineup = NULL, params = params, id = 1000)
x
x
lineup <- list(home = list(bat = unique(DB$`2013`$BAL$Bat$Name)[c(1:9)],
pitch = DB$`2013`$BAL$Pitch$Name[1]),
away = list(bat = unique(DB$`2013`$BOS$Bat$Name)[c(1:9)],
pitch = DB$`2013`$BOS$Pitch$Name[1]),
teams = list(home = "BAL",
away = "BOS"))
date <- DB$`2013`$BAL$Bat$Date[1000]
x <- query_stats(date = date, lineup = lineup, params = params, id = 1000)
x <- query_stats(date = date, lineup = lineup, params = params)
x
x
document()
update_design_matrix("D:/MLB", 100)
document()
update_design_matrix("D:/MLB", 100)
class(DB$`2010`$ATL$Pitch)
version <- 100
path <- "D:/MLB"
#Check if frame needs to be created, or updated
dir <- paste(path, "/MLB_Modeling/Regression/", n, sep = "")
if(!dir.exists(dir)){
dir.create(dir)
}
path_save <- paste(dir, "/R_regression_matrix.rds", sep = "")
if(file.exists(path_save)){
update <- TRUE
existing_data <- readRDS(path_save)
ID_done <- existing_data$Y$ID
scores <- scores[!(ID %in% ID_done)]
scores <- scores[Date > max(existing_data$Y$Date)]
} else {
update <- FALSE
}
#Weed-out unusable data
scores <- scores[Avaible_for_Betting == TRUE]
scores[, Missing_Data := FALSE]
sample_row <- query_stats(date = NULL, lineup = NULL, params = params, id = as.numeric(scores$ID[1]))
ncols <- ncol(sample_row)
nrows <- nrow(scores)
X <- matrix(0.0, nrows, ncols)
colnames(X) <- colnames(sample_row)
X <- as.data.table(X)
sd_col <- c(1:ncol(X))
setkey(scores, "ID")
pb <- txtProgressBar(min = 0, max = nrow(X), style = 3)
n_miss <- 0
class(scores)
query_stats(date = NULL, lineup = NULL, params = params, id = as.numeric(scores$ID[1]))
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/Seasonal_Database.rds", sep = "")
DB <- readRDS(load_path)
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/DB_Scores.rds", sep = "")
scores <- readRDS(load_path)
query_stats(date = NULL, lineup = NULL, params = params, id = as.numeric(scores$ID[1]))
update_design_matrix("D:/MLB", 100)
#Check if frame needs to be created, or updated
dir <- paste(path, "/MLB_Modeling/Regression/", n, sep = "")
if(!dir.exists(dir)){
dir.create(dir)
}
path_save <- paste(dir, "/R_regression_matrix.rds", sep = "")
if(file.exists(path_save)){
update <- TRUE
existing_data <- readRDS(path_save)
ID_done <- existing_data$Y$ID
scores <- scores[!(ID %in% ID_done)]
scores <- scores[Date > max(existing_data$Y$Date)]
} else {
update <- FALSE
}
#Weed-out unusable data
scores <- scores[Avaible_for_Betting == TRUE]
scores[, Missing_Data := FALSE]
sample_row <- query_stats(date = NULL, lineup = NULL, params = params, id = as.numeric(scores$ID[1]))
ncols <- ncol(sample_row)
nrows <- nrow(scores)
X <- matrix(0.0, nrows, ncols)
colnames(X) <- colnames(sample_row)
X <- as.data.table(X)
sd_col <- c(1:ncol(X))
setkey(scores, "ID")
pb <- txtProgressBar(min = 0, max = nrow(X), style = 3)
n_miss <- 0
for(i in 1:nrow(X)){
row_val <- try(query_stats(date = NULL, lineup = NULL, params = params, id = scores$ID[i]), silent = TRUE)
if(class(row_val)[1] == "try-error"){
print("Lineup not found.", quote = FALSE)
set(X, i = as.integer(i), j = sd_col, value = NA)
} else {
if(nrow(row_val) == 0){
set(X, i = as.integer(i), j = sd_col, value = NA)
} else {
set(X, i = as.integer(i), j = sd_col, value = row_val[1])
}
if(any(is.na(X[i]))){
n_miss <- n_miss + 1
p_miss <- round(100 * n_miss / i, 2)
print(paste("Warning: NA values (", p_miss, "%) ...", sep = ""), quote = FALSE)
scores[i, "Missing_Data"] <- TRUE
}
}
setTxtProgressBar(pb, i)
}
rmv <- unique(which(is.na(X), arr.ind = TRUE)[, 1])
keep <- which(!scores$Missing_Data)
scores <- scores[keep]
X <- X[keep]
rmv <- unique(which(is.na(X), arr.ind = TRUE)[, 1])
if(length(rmv) > 0){
X <- X[-rmv]
scores <- scores[-rmv]
}
index <- order(scores$Date)
scores <- scores[index]
X <- X[index]
if(update){
scores <- rbind(existing_data$Y[, names(scores), with = FALSE],
scores)
X <- rbind(existing_data$X[, names(X), with = FALSE],
X)
}
n <- version
################################################
########### Load database       ################
################################################
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/Seasonal_Database.rds", sep = "")
DB <- readRDS(load_path)
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/DB_Scores.rds", sep = "")
scores <- readRDS(load_path)
################################################
################################################
################################################
########### REGRESSION FRAME    ################
################################################
#Check if frame needs to be created, or updated
dir <- paste(path, "/MLB_Modeling/Regression/", n, sep = "")
if(!dir.exists(dir)){
dir.create(dir)
}
path_save <- paste(dir, "/R_regression_matrix.rds", sep = "")
if(file.exists(path_save)){
update <- TRUE
existing_data <- readRDS(path_save)
ID_done <- existing_data$Y$ID
scores <- scores[!(ID %in% ID_done)]
scores <- scores[Date > max(existing_data$Y$Date)]
} else {
update <- FALSE
}
#Weed-out unusable data
scores <- scores[Avaible_for_Betting == TRUE]
scores[, Missing_Data := FALSE]
sample_row <- query_stats(date = NULL, lineup = NULL, params = params, id = as.numeric(scores$ID[1]))
query_stats(date = NULL, lineup = NULL, params = params, id = as.numeric(scores$ID[10]))
params
lineup
query_stats(date, lineup, params, id = NULL)
query_stats(date = NULL, lineup = NULL, params, id = 100)
id = 100
if(!is.null(id)){
id <- as.integer(id)
keys <- data.table::key(scores)
if(is.null(keys) | length(keys) > 1){
data.table::setkey(scores, "ID")
} else if(keys != "ID"){
data.table::setkey(scores, "ID")
}
game_info <- scores[.(id)]
teams <- unlist(game_info[, c("Team_Home", "Team_Away")])
date <- game_info$Date
season <- as.character(game_info$Season)
for(team in teams){
for(j in 1:2){
keys <- data.table::key(DB[[season]][[team]][[j]])
if(is.null(keys) | length(keys) > 1){
data.table::setkey(DB[[season]][[team]][[j]], "ID")
} else if(keys != "ID"){
data.table::setkey(DB[[season]][[team]][[j]], "ID")
}
}
}
lineup <- list()
for(a in 1:2){
lineup[[a]] <- list()
for(b in 1:2){
lineup[[a]][[b]] <- DB[[season]][[teams[a]]][[b]][.(id)][Announced == "Yes"]$Name
}
names(lineup[[a]]) <- c("bat", "pitch")
}
lineup[[3]] <- list(home = as.character(teams[1]), away = as.character(teams[2]))
names(lineup) <- c("home", "away", "teams")
}
id <- as.integer(id)
keys <- data.table::key(scores)
if(is.null(keys) | length(keys) > 1){
data.table::setkey(scores, "ID")
} else if(keys != "ID"){
data.table::setkey(scores, "ID")
}
keys
game_info <- scores[.(id)]
teams <- unlist(game_info[, c("Team_Home", "Team_Away")])
date <- game_info$Date
season <- as.character(game_info$Season)
for(team in teams){
for(j in 1:2){
keys <- data.table::key(DB[[season]][[team]][[j]])
if(is.null(keys) | length(keys) > 1){
data.table::setkey(DB[[season]][[team]][[j]], "ID")
} else if(keys != "ID"){
data.table::setkey(DB[[season]][[team]][[j]], "ID")
}
}
}
j '- 1'
j <- 1
team <- teams[1]
DB[[season]][[team]][[j]]
season
team
teams
id <- as.integer(id)
keys <- data.table::key(scores)
if(is.null(keys) | length(keys) > 1){
data.table::setkey(scores, "ID")
} else if(keys != "ID"){
data.table::setkey(scores, "ID")
}
game_info <- scores[.(id)]
teams <- unlist(game_info[, c("Team_Home", "Team_Away")])
date <- game_info$Date
season <- as.character(game_info$Season)
game_info
scores$ID[1]
scores
scores
n <- version
################################################
########### Load database       ################
################################################
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/Seasonal_Database.rds", sep = "")
DB <- readRDS(load_path)
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/DB_Scores.rds", sep = "")
scores <- readRDS(load_path)
################################################
################################################
################################################
########### REGRESSION FRAME    ################
################################################
#Check if frame needs to be created, or updated
dir <- paste(path, "/MLB_Modeling/Regression/", n, sep = "")
if(!dir.exists(dir)){
dir.create(dir)
}
update <- TRUE
existing_data <- readRDS(path_save)
ID_done <- existing_data$Y$ID
scores <- scores[!(ID %in% ID_done)]
scores
scores$Date
max(scores$Date)
existing_data$Y$Date
max(existing_data$Y$Date)
scores[Date > max(existing_data$Y$Date)]
scores$Avaible_for_Betting
scores <- scores[!(ID %in% ID_done)]
scores <- scores[Date > max(existing_data$Y$Date)]
scores
dim(scores)
update_database(""D:/MLB"")
update_database("D:/MLB")
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/Seasonal_Database.rds", sep = "")
DB <- readRDS(load_path)
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/DB_Scores.rds", sep = "")
scores <- readRDS(load_path)
view(scores)
View(scores)
update_design_matrix("D:/MLB", 100)
document()
update_design_matrix("D:/MLB", 100)
