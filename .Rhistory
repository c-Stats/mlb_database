out <- rep(0, length(x))
s <- 0
for(i in 1:length(x)){
if(s == 0){mult <- 0} else if(s > 0){mult <- x[i]} else if(s < 0){mult <- 1 - x[i]}
s <- s * mult
if(x[i] == 1){s <- s + 1} else{s <- s - 1}
out[i] <- s
}
out <- c(0, out[-length(out)])
return(out)
}
matches_played[, Streak := f(Win)]
matches_played <- matches_played[, lapply(.SD, last), .SDcols = c(2:ncol(matches_played)), by = Date]
matches_played[, Score_diff := (Score - Score_vs)]
processed_frames[[length(processed_frames) + 1]] <- matches_played
setTxtProgressBar(pb, k)
k <- k + 1
}
}
processed_frames <- dplyr::bind_rows(processed_frames)
processed_frames <- processed_frames[order(Date, Team)]
processed_frames <- data.table::as.data.table(processed_frames)
rankings <- as.data.frame(matrix(nrow = n_dates * n_teams, ncol = 7))
colnames(rankings) <- c("Date", "Team", "Win_p", "PPG", "PPG_vs", "PPG_diff", "Streak")
rankings[1, ] <- processed_frames[1, colnames(rankings), with = FALSE]
rankings <- data.table::as.data.table(rankings)
srt <- c("Team", "Win_p", "PPG", "PPG_vs", "PPG_diff", "Streak")
decr <- c("Win_p", "PPG", "PPG_diff", "Streak")
incr <- c("PPG_vs")
paste <- c("Win_p", "PPG", "PPG_vs", "PPG_diff", "Streak")
n_iter <- n_dates
print("Computing Team rankings ...", quote = FALSE)
pb <- txtProgressBar(min = 0, max = n_iter, style = 3)
k <- 1
for(i in 1:n_dates){
subframe <- processed_frames[Date <= dates[i]]
subframe <- subframe[, lapply(.SD, last), .SDcols = srt, by = Team]
data.table::setDT(subframe)[, (decr) := lapply(.SD, order, decreasing = TRUE), .SDcols = decr]
data.table::setDT(subframe)[, (incr) := lapply(.SD, order, decreasing = FALSE), .SDcols = incr]
data.table::setorder(subframe, Team)
frm <- (i-1)*n_teams + 1
to <- i*n_teams
index <- c(frm:to)[match(subframe$Team, teams)]
fill <- c(frm:to)[-match(subframe$Team, teams)]
data.table::set(rankings, i = c(frm:to), j = match("Team", colnames(rankings)), value = teams)
data.table::set(rankings, i = c(frm:to), j = match("Date", colnames(rankings)), value = dates[i])
data.table::set(rankings, i = index, j = match(paste, colnames(rankings)), value = subframe[, paste, with = FALSE])
if(length(fill) > 0){
data.table::set(rankings, i = fill, j = match(paste, colnames(rankings)), value = 0)
}
setTxtProgressBar(pb, k)
k <- k + 1
}
rankings[, Date := as.Date(Date, origin = "1970-01-01")]
################################################
################################################
################################################
################ SPLIT DATA     ################
################################################
splitted_data <- list()
seasons <- sort(unlist(unique(data$Scores[, (Season)])))
teams <- sort(unlist(unique(data$Scores[, (Team_Home)])))
for(i in 2:length(data)){
data.table::setkeyv(data[[i]], c("Season", "Team"))
}
processed_frames[, Season := as.numeric(stringr::str_split(processed_frames$Date, "-", simplify = TRUE)[, 1])]
rankings[, Season := as.numeric(stringr::str_split(rankings$Date, "-", simplify = TRUE)[, 1])]
data.table::setkeyv(processed_frames, c("Season", "Team"))
data.table::setkeyv(rankings, c("Season", "Team"))
for(season in seasons){
splitted_data[[length(splitted_data) + 1]] <- list()
print(paste("Querying", season, "season..."), quote = FALSE)
for(team in teams){
print(paste("Querying", team, "..."), quote = FALSE)
#Query according to seasons and teams
k <-length(splitted_data)
splitted_data[[k]][[length(splitted_data[[k]]) + 1]] <- list()
splitted_data[[k]][[length(splitted_data[[k]])]]$Bat <- data$Bat[.(season, team)]
splitted_data[[k]][[length(splitted_data[[k]])]]$Pitch <- data$Pitch[.(season, team)]
splitted_data[[k]][[length(splitted_data[[k]])]]$Bat_Lineups <- data$Bat_Lineups[.(season, team)]
splitted_data[[k]][[length(splitted_data[[k]])]]$Pitch_Lineups <- data$Pitch_Lineups[.(season, team)]
splitted_data[[k]][[length(splitted_data[[k]])]]$Bat_Lineups <- data$Bat_Lineups[.(season, team)]
splitted_data[[k]][[length(splitted_data[[k]])]]$Pitch_Lineups <- data$Pitch_Lineups[.(season, team)]
splitted_data[[k]][[length(splitted_data[[k]])]]$Team_Stats <- processed_frames[.(season, team)]
splitted_data[[k]][[length(splitted_data[[k]])]]$Team_Rankings <- rankings[.(season, team)]
#Add weights
weight_colname <- c("PA", "IP")
for(i in 1:2){
weights <- splitted_data[[k]][[length(splitted_data[[k]])]][[i]][, c("ID", weight_colname[i]), with = FALSE]
weights <- weights[, lapply(.SD, function(x){return(x / sum(x))}), by = ID, .SDcols = weight_colname[i]]
splitted_data[[k]][[length(splitted_data[[k]])]][[i]][, Weight := weights[, weight_colname[i], with = FALSE][[1]]]
}
}
names(splitted_data[[length(splitted_data)]]) <- teams
print("", quote = FALSE)
print("###################################", quote = FALSE)
print("", quote = FALSE)
}
names(splitted_data) <- seasons
################################################
################################################
################################################
######### ANNOUNCED / RANDOM SPLIT   ###########
################################################
#Loop over seasons
n_annc <- list(f = function(x){7 <= length(which(x == "Yes"))},
g = function(x){1 == length(which(x == "Yes"))})
col_names <- c("Bat_Home_Av", "Pitch_Home_Av", "Bat_Away_Av", "Pitch_Away_Av")
scores[, (col_names) := FALSE]
data.table::setkey(scores, "ID")
for(i in 1:length(splitted_data)){
print(paste("Tagging stating lineups...", seasons[i], "season..."), quote = FALSE)
pb <- txtProgressBar(min = 0, max = length(splitted_data[[i]]), style = 3)
#Loop over teams
for(j in 1:length(splitted_data[[i]])){
#Loop over bat, pitch
for(k in 1:2){
#Tag announced batters and pitchers
to_join <- splitted_data[[i]][[j]][[k + 2]][, c("ID", "Name")]
to_join[, Announced := "Yes"]
data.table::setkeyv(splitted_data[[i]][[j]][[k]], c("Name", "ID"))
data.table::setkeyv(to_join, c("Name", "ID"))
splitted_data[[i]][[j]][[k]][to_join, Announced := i.Announced]
#Check if lineups are missing
annc_per <- splitted_data[[i]][[j]][[k]][, lapply(.SD, n_annc[[k]]), .SDcols = c("Announced"), by = c("ID")]
loc <- splitted_data[[i]][[j]][[k]][, lapply(.SD, last), .SDcols = c("Location"), by = c("ID")]
data.table::setkey(annc_per, "ID")
data.table::setkey(loc, "ID")
#Fill the score frame (tag avaible lineups -- debugging purpose)
annc_per[loc, Location := i.Location]
home <- annc_per[Location == "Home"]
away <- annc_per[Location == "Away"]
if(k == 1){
scores[annc_per[Location == "Home"], Bat_Home_Av := i.Announced]
scores[annc_per[Location == "Away"], Bat_Away_Av := i.Announced]
} else {
scores[annc_per[Location == "Home"], Pitch_Home_Av := i.Announced]
scores[annc_per[Location == "Away"], Pitch_Away_Av := i.Announced]
}
}
setTxtProgressBar(pb, j)
}
print("", quote = FALSE)
print("###################################", quote = FALSE)
print("", quote = FALSE)
}
scores[, Avaible_for_Regr := apply(scores[, c("Bat_Home_Av", "Pitch_Home_Av", "Bat_Away_Av", "Pitch_Away_Av")], 1, function(x){any(!x) == FALSE})]
avaible_p <- round(100 * length(which(scores$Avaible_for_Regr)) / nrow(scores), 2)
print(paste(avaible_p, "% of the scrapped data is avaible for regression purposes.", sep = ""), quote = FALSE)
for(i in 1:length(splitted_data)){
for(j in 1:length(splitted_data[[i]])){
splitted_data[[i]][[j]]$Bat_Lineups <- NULL
splitted_data[[i]][[j]]$Pitch_Lineups <- NULL
#Nth match played dummy function
g <- function(x){
unique_vals <- sort(unique(x))
return(match(x, unique_vals))
}
for(k in 1:4){
data.table::setorder(splitted_data[[i]][[j]][[k]], Date)
splitted_data[[i]][[j]][[k]][, Nth_match := g(Date)]
}
data.table::setkeyv(splitted_data[[i]][[j]]$Bat, c("Announced"))
splitted_data[[i]][[j]]$Bat_Relief <- splitted_data[[i]][[j]]$Bat[.("No")]
data.table::setkeyv(splitted_data[[i]][[j]]$Pitch, c("Announced"))
splitted_data[[i]][[j]]$Pitch_Relief <- splitted_data[[i]][[j]]$Pitch[.("No")]
#Re-order
splitted_data[[i]][[j]] <- splitted_data[[i]][[j]][c(1,2,5,6,3,4)]
#Nth match played dummy function
Geom_MLE <- function(x){
d <- diff(c(0, x))
d <- c(1:length(d)) / cumsum(d)
return(d)
}
for(k in 1:4){
splitted_data[[i]][[j]][[k]][, Geom_MLE := Geom_MLE(Nth_match), by = Name]
}
}
}
################################################
################################################
################################################
########### ADD MONEYLINES           ###########
################################################
print("Adding moneyline data ...", quote = FALSE)
ID <- data$Scores$ID
#Retrieve moneyline frame
#Historical
ML <- data.table::fread(paste(path, "/MLB_Modeling/Betting/Clean_Data/MLB_Odds.csv", sep = ""))
ML <- ML[ID != -1] %>%
.[, (c("Pitcher_Home", "Pitcher_Away")) := NULL]
data.table::setkey(ML, "ID")
#Moneylines
scores[ML, Factor_Home_Historical := round(i.Close_Home + 1, 2)]
scores[ML, Factor_Away_Historical := round(i.Close_Away + 1, 2)]
#Over / Under
scores[ML, OU_Home_Historical := i.CloseOU_Home]
scores[ML, OU_Away_Historical := i.CloseOU_Away]
scores[ML, OU_ML_Home_Historical := round(i.OU_ML_Close_Home + 1, 2)]
scores[ML, OU_ML_Away_Historical := round(i.OU_ML_Close_Away + 1, 2)]
#RunLine
scores[ML, RunLine_Home_Historical := i.RunLine_Home]
scores[ML, RunLine_Away_Historical := i.RunLine_Away]
scores[ML, RunLine_ML_Home_Historical := round(i.RunLine_ML_Home + 1, 2)]
scores[ML, RunLine_ML_Away_Historical := round(i.RunLine_ML_Away + 1, 2)]
#Find the profit margin.
#Assummed to be the same on both sides, i.e.: 1 / (1 + r_1 + c) + 1/(1 + r_2 + c) = 1
b <- scores$Factor_Home_Historical + scores$Factor_Away_Historical - 2
c <- scores$Factor_Home_Historical * scores$Factor_Away_Historical - scores$Factor_Home_Historical - scores$Factor_Away_Historical
scores[, Profit_Margin_Historical := (-b + sqrt(b^2 - 4*c)) / 2]
scores[, P_Home_Win_Historical := 1 / (Factor_Home_Historical + Profit_Margin_Historical)]
#LotoQuebec data
ML_LotoQc <- data.table::fread(paste(path, "/MLB_Modeling/Betting/Predicted_Lineups/LotoQc_Moneylines_Clean.csv", sep = ""))
data.table::setkeyv(scores, c("Date", "Team_Home", "Team_Away"))
data.table::setkeyv(ML_LotoQc, c("Date", "Team_Home", "Team_Away"))
scores[ML_LotoQc, Factor_Home_LotoQc := round(i.Factor_Home, 2)]
scores[ML_LotoQc, Factor_Away_LotoQc := round(i.Factor_Away, 2)]
b <- scores$Factor_Home_LotoQc + scores$Factor_Away_LotoQc - 2
c <- scores$Factor_Home_LotoQc * scores$Factor_Away_LotoQc - scores$Factor_Home_LotoQc - scores$Factor_Away_LotoQc
scores[, Profit_Margin_LotoQc := (-b + sqrt(b^2 - 4*c)) / 2]
scores[, P_Home_Win_LotoQc := 1 / (Factor_Home_LotoQc + Profit_Margin_LotoQc)]
#Approximation for missing LotoQc data
mean_LotoQc_profit_margin <- mean(na.omit(scores$Profit_Margin_LotoQc))
scores[, Factor_Home_LotoQc_Approx := Factor_Home_LotoQc]
scores[, Factor_Away_LotoQc_Approx := Factor_Away_LotoQc]
scores[, Profit_Margin_LotoQc_Approx := Profit_Margin_LotoQc]
missing_val_index_LotoQc <- which(is.na(scores$Factor_Home_LotoQc) | is.na(scores$Factor_Away_LotoQc))
scores[missing_val_index_LotoQc, Factor_Home_LotoQc_Approx := Factor_Home_Historical + Profit_Margin_Historical - mean_LotoQc_profit_margin]
scores[missing_val_index_LotoQc, Factor_Away_LotoQc_Approx := Factor_Away_Historical + Profit_Margin_Historical - mean_LotoQc_profit_margin]
scores[missing_val_index_LotoQc, Profit_Margin_LotoQc_Approx := mean_LotoQc_profit_margin]
scores[, P_Home_Win_LotoQc_Approx := 1 / (Factor_Away_LotoQc_Approx + Profit_Margin_LotoQc_Approx)]
#Tag matches with avaible moneylines data
scores[, Avaible_for_Betting := scores$Avaible_for_Regr & !is.na(scores$P_Home_Win_LotoQc_Approx)]
avaible_p <- round(100 * length(which(scores$Avaible_for_Betting)) / nrow(scores), 2)
print(paste(avaible_p, "% of the scrapped data is avaible for betting strategy testing purposes.", sep = ""), quote = FALSE)
################################################
################################################
for(i in 1:length(splitted_data)){
for(j in 1:length(splitted_data[[i]])){
for(k in 1:length(splitted_data[[i]][[j]])){
splitted_data[[i]][[j]][[k]]
out <- grepl("Unnamed", names(splitted_data[[i]][[j]][[k]]))
if(any(out)){
out <- names(splitted_data[[i]][[j]][[k]])[which(out)]
splitted_data[[i]][[j]][[k]][, (out) := NULL]
}
}
}
}
################################################
############## SAVE DATABASE    ################
################################################
print("Done. Saving ...", quote = FALSE)
save_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/Seasonal_Database.rds", sep = "")
save_path_2 <- paste(path, "/MLB_Modeling/Scores/Clean_Data/DB_Scores.rds", sep = "")
saveRDS(splitted_data, save_path)
saveRDS(scores, save_path_2)
################################################
################################################
}
update_database("D:/MLB")
library(devtools)
document()
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/Seasonal_Database.rds", sep = "")
DB <- readRDS(load_path)
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/DB_Scores.rds", sep = "")
scores <- readRDS(load_path)
path = "D:/MLB"
n <- 100
params <- list()
params$n_season <- 2
params$n_match_bat <- 20
params$n_match_pitch <- 40
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/Seasonal_Database.rds", sep = "")
DB <- readRDS(load_path)
load_path <- paste(path, "/MLB_Modeling/Scores/Clean_Data/DB_Scores.rds", sep = "")
scores <- readRDS(load_path)
lineup <- list(home = list(bat = unique(DB$`2013`$BAL$Bat$Name)[c(1:9)],
pitch = DB$`2013`$BAL$Pitch$Name[1]),
away = list(bat = unique(DB$`2013`$BOS$Bat$Name)[c(1:9)],
pitch = DB$`2013`$BOS$Pitch$Name[1]),
teams = list(home = "BAL",
away = "BOS"))
date <- DB$`2013`$BAL$Bat$Date[1000]
?query_stats
query_stats(date, lineup, params)
id = NULL
query_stats(date, lineup, params)
#Construct the lineup if an ID is provided instead of a lineup
if(!is.null(id)){
id <- as.integer(id)
keys <- data.table::key(scores)
if(is.null(keys) | length(keys) > 1){
data.table::setkey(scores, "ID")
} else if(keys != "ID"){
data.table::setkey(scores, "ID")
}
game_info <- scores[.(id)]
teams <- unlist(game_info[, c("Team_Home", "Team_Away")])
date <- game_info$Date
season <- as.character(game_info$Season)
for(team in teams){
for(j in 1:2){
keys <- data.table::key(DB[[season]][[team]][[j]])
if(is.null(keys) | length(keys) > 1){
data.table::setkey(DB[[season]][[team]][[j]], "ID")
} else if(keys != "ID"){
data.table::setkey(DB[[season]][[team]][[j]], "ID")
}
}
}
lineup <- list()
for(a in 1:2){
lineup[[a]] <- list()
for(b in 1:2){
lineup[[a]][[b]] <- DB[[season]][[teams[a]]][[b]][.(id)][Announced == "Yes"]$Name
}
names(lineup[[a]]) <- c("bat", "pitch")
}
lineup[[3]] <- list(home = as.character(teams[1]), away = as.character(teams[2]))
names(lineup) <- c("home", "away", "teams")
}
season <- stringr::str_split(date, "-", simplify = TRUE)[1]
seasons <- (as.integer(season) - params$n_season + 1):as.integer(season)
seasons <- as.character(seasons)
seasons <- seasons[which(seasons %in% names(DB))]
frames <- list()
for(i in 1:2){
#Check if DB tables are keyed
for(s in seasons){
for(j in 1:4){
keys <- data.table::key(DB[[s]][[lineup$teams[[i]]]][[j]])
if(is.null(keys) | length(keys) > 1){
data.table::setkey(DB[[s]][[lineup$teams[[i]]]][[j]], "Name")
} else if(keys != "Name"){
data.table::setkey(DB[[s]][[lineup$teams[[i]]]][[j]], "Name")
}
}
}
#Get the match number
match_n <- DB[[season]][[lineup$teams[[i]]]]$Pitch[Date < date]
match_n <- match_n[which.max(Nth_match)]$Nth_match[1] + 1
frames[[i]] <- list()
n_match_total <- c(0)
#Query date range
#Announced players
dummy <- list()
for(s in seasons){
dummy[[length(dummy) + 1]] <- DB[[s]][[lineup$teams[[i]]]]$Bat[.(lineup[[i]]$bat)]
dummy[[length(dummy)]] <- dummy[[length(dummy)]][complete.cases(dummy[[length(dummy)]]), ]
dummy[[length(dummy)]][, Nth_match_total := Nth_match + sum(n_match_total)]
if(s == season){match_n <- match_n + sum(n_match_total)}
n_match_total <- c(n_match_total, max(dummy[[length(dummy)]]$Nth_match))
}
frames[[i]]$Bat_A <- dplyr::bind_rows(dummy)
frames[[i]]$Bat_A <- frames[[i]]$Bat_A[Nth_match_total %between% c(match_n - params$n_match_bat, match_n - 1)]
#Query date range
#Unannounced players
dummy <- list()
k <- 1
for(s in seasons){
dummy[[length(dummy) + 1]] <- DB[[s]][[lineup$teams[[i]]]]$Bat_Relief[Date < date]
dummy[[length(dummy)]] <- dummy[[length(dummy)]][complete.cases(dummy[[length(dummy)]]), ]
dummy[[length(dummy)]][, Nth_match_total := Nth_match + n_match_total[k]]
k <- k + 1
}
frames[[i]]$Bat_UA <- dplyr::bind_rows(dummy)
data.table::setkey(frames[[i]]$Bat_UA, "Name")
frames[[i]]$Bat_UA <- frames[[i]]$Bat_UA[!.(lineup[[i]]$bat)]
frames[[i]]$Bat_UA <- frames[[i]]$Bat_UA[Nth_match_total %between% c(match_n - params$n_match_bat, match_n - 1)]
#Get the most recent Geom_MLE variable for unanounced players
data.table::setkey(frames[[i]]$Bat_UA, NULL)
data.table::setorder(frames[[i]]$Bat_UA, Date)
cols <- match(c("Geom_MLE", "Nth_match_total"), colnames(frames[[i]]$Bat_UA))
n_match_not_played <- frames[[i]]$Bat_UA[, lapply(.SD, last), .SDcols = cols, by = Name]
n_match_not_played[, Mnp := match_n - Nth_match_total]
n_match_not_played[Geom_MLE == 1, Geom_MLE := 0.5]
n_match_not_played[Geom_MLE == 0, Geom_MLE := 10^(-6)]
n_match_not_played[, P_val := 1 - pgeom(Mnp, Geom_MLE)]
n_match_not_played <- n_match_not_played[P_val >= 0.05 & Mnp <= 20]
data.table::setkeyv(n_match_not_played, c("Name"))
data.table::setkeyv(frames[[i]]$Bat_UA, c("Name"))
frames[[i]]$Bat_UA <- frames[[i]]$Bat_UA[.(unique(n_match_not_played$Name))]
frames[[i]]$Bat_UA[n_match_not_played, Geom_MLE := i.Geom_MLE]
original_weight_sum <- sum(frames[[i]]$Bat_UA$Weight)
frames[[i]]$Bat_UA[, Weight := Weight * Geom_MLE]
correcting_factor <- original_weight_sum / sum(frames[[i]]$Bat_UA$Weight)
frames[[i]]$Bat_UA[, Weight := Weight * (correcting_factor)]
#Compute the average, by player
#Then the weighted average
index_var <- which(sapply(frames[[i]]$Bat_A, is.numeric))
index_var <- index_var[which(names(index_var) != "ID" & names(index_var) != "Season")]
var_names <- names(index_var)
#For starting players, compute the weights given they were announced
starting_weights <- frames[[i]]$Bat_A[Announced == "Yes", c("Name","Weight"), with = FALSE][, lapply(.SD, weighted.mean, w = Weight), .SDcols = c("Weight"), by = Name]
data.table::setkey(starting_weights, "Name")
frames[[i]]$Bat_A[, (var_names) := lapply(.SD, as.numeric), .SDcols = index_var]
frames[[i]]$Bat_A <- frames[[i]]$Bat_A[, lapply(.SD, mean), .SDcols = index_var, by = Name]
data.table::setkey(frames[[i]]$Bat_A, "Name")
frames[[i]]$Bat_A[starting_weights, Weight := i.Weight]
frames[[i]]$Bat_A[, Name := NULL]
frames[[i]]$Bat_A <- frames[[i]]$Bat_A[, lapply(.SD, weighted.mean, w = Weight), .SDcols = c(1:ncol(frames[[i]]$Bat_A))]
frames[[i]]$Bat_UA[, (var_names) := lapply(.SD, as.numeric), .SDcols = index_var]
frames[[i]]$Bat_UA <- frames[[i]]$Bat_UA[, lapply(.SD, mean), .SDcols = index_var, by = Name]
frames[[i]]$Bat_UA[, Name := NULL]
frames[[i]]$Bat_UA <- frames[[i]]$Bat_UA[, lapply(.SD, weighted.mean, w = Weight), .SDcols = c(1:ncol(frames[[i]]$Bat_A))]
#Combine the A and UA stats
to_del <- c("Nth_match", "Geom_MLE", "Nth_match_total")
frames[[i]]$Bat <- dplyr::bind_rows(frames[[i]])[, lapply(.SD, weighted.mean, w = Weight), .SDcols = var_names] %>%
.[, (to_del) := NULL]
frames[[i]]$Bat_UA <- NULL
frames[[i]]$Bat_A <- NULL
suffix <- paste("_BAT_", toupper(names(lineup$teams)[i]), sep = "")
colnames(frames[[i]]$Bat) <- paste(colnames(frames[[i]]$Bat), suffix, sep = "")
#Query date range
#Announced players
dummy <- list()
k <- 1
for(s in seasons){
dummy[[length(dummy) + 1]] <- DB[[s]][[lineup$teams[[i]]]]$Pitch[.(lineup[[i]]$pitch)]
dummy[[length(dummy)]] <- dummy[[length(dummy)]][complete.cases(dummy[[length(dummy)]]), ]
dummy[[length(dummy)]][, Nth_match_total := Nth_match + n_match_total[k]]
k <- k + 1
}
frames[[i]]$Pitch_A <- dplyr::bind_rows(dummy)
frames[[i]]$Pitch_A <- frames[[i]]$Pitch_A[Nth_match_total %between% c(match_n - params$n_match_pitch, match_n - 1)]
#Query date range
#Unannounced players
dummy <- list()
k <- 1
for(s in seasons){
dummy[[length(dummy) + 1]] <- DB[[s]][[lineup$teams[[i]]]]$Pitch_Relief[Date < date]
dummy[[length(dummy)]] <- dummy[[length(dummy)]][complete.cases(dummy[[length(dummy)]]), ]
dummy[[length(dummy)]][, Nth_match_total := Nth_match + n_match_total[k]]
k <- k + 1
}
frames[[i]]$Pitch_UA <- dplyr::bind_rows(dummy)
data.table::setkey(frames[[i]]$Pitch_UA, "Name")
frames[[i]]$Pitch_UA <- frames[[i]]$Pitch_UA[!.(lineup[[i]]$pitch)]
frames[[i]]$Pitch_UA <- frames[[i]]$Pitch_UA[Nth_match_total %between% c(match_n - params$n_match_pitch, match_n - 1)]
#Get the most recent Geom_MLE variable for unanounced players
data.table::setkey(frames[[i]]$Pitch_UA, NULL)
data.table::setorder(frames[[i]]$Pitch_UA, Date)
cols <- match(c("Geom_MLE", "Nth_match_total"), colnames(frames[[i]]$Pitch_UA))
n_match_not_played <- frames[[i]]$Pitch_UA[, lapply(.SD, last), .SDcols = cols, by = Name]
n_match_not_played[, Mnp := match_n - Nth_match_total]
n_match_not_played[Geom_MLE == 1, Geom_MLE := 0.5]
n_match_not_played[Geom_MLE == 0, Geom_MLE := 10^(-6)]
n_match_not_played[, P_val := 1 - pgeom(Mnp, Geom_MLE)]
n_match_not_played <- n_match_not_played[P_val >= 0.05 & Mnp <= 20]
data.table::setkeyv(n_match_not_played, c("Name"))
data.table::setkeyv(frames[[i]]$Pitch_UA, c("Name"))
frames[[i]]$Pitch_UA <- frames[[i]]$Pitch_UA[.(unique(n_match_not_played$Name))]
frames[[i]]$Pitch_UA[n_match_not_played, Geom_MLE := i.Geom_MLE]
original_weight_sum <- sum(frames[[i]]$Pitch_UA$Weight)
frames[[i]]$Pitch_UA[, Weight := Weight * Geom_MLE]
correcting_factor <- original_weight_sum / sum(frames[[i]]$Pitch_UA$Weight)
frames[[i]]$Pitch_UA[, Weight := Weight * (correcting_factor)]
#Compute the average, by player
#Then the weighted average
index_var <- which(sapply(frames[[i]]$Pitch_A, is.numeric))
index_var <- index_var[which(names(index_var) != "ID" & names(index_var) != "Season")]
var_names <- names(index_var)
#For starting players, compute the weights given they were announced
starting_weights <- frames[[i]]$Pitch_A[Announced == "Yes", c("Name","Weight"), with = FALSE][, lapply(.SD, weighted.mean, w = Weight), .SDcols = c("Weight"), by = Name]
data.table::setkey(starting_weights, "Name")
frames[[i]]$Pitch_A[, (var_names) := lapply(.SD, as.numeric), .SDcols = index_var]
frames[[i]]$Pitch_A <- frames[[i]]$Pitch_A[, lapply(.SD, mean), .SDcols = index_var, by = Name]
data.table::setkey(frames[[i]]$Pitch_A, "Name")
frames[[i]]$Pitch_A[starting_weights, Weight := i.Weight]
frames[[i]]$Pitch_A[, Name := NULL]
frames[[i]]$Pitch_UA[, (var_names) := lapply(.SD, as.numeric), .SDcols = index_var]
frames[[i]]$Pitch_UA <- frames[[i]]$Pitch_UA[, lapply(.SD, mean), .SDcols = index_var, by = Name]
frames[[i]]$Pitch_UA[, Name := NULL]
frames[[i]]$Pitch_UA <- frames[[i]]$Pitch_UA[, lapply(.SD, weighted.mean, w = Weight), .SDcols = c(1:ncol(frames[[i]]$Pitch_A))]
#Combine the A and UA stats
to_del <- c("Nth_match", "Geom_MLE", "Nth_match_total")
frames[[i]]$Pitch <- dplyr::bind_rows(frames[[i]][-1])[, lapply(.SD, weighted.mean, w = Weight), .SDcols = var_names] %>%
.[, (to_del) := NULL]
frames[[i]]$Pitch_UA <- NULL
frames[[i]]$Pitch_A <- NULL
suffix <- paste("_PITCH_", toupper(names(lineup$teams)[i]), sep = "")
colnames(frames[[i]]$Pitch) <- paste(colnames(frames[[i]]$Pitch), suffix, sep = "")
#Get the team info
frames[[i]]$Team_Stats <- DB[[season]][[lineup$teams[[i]]]]$Team_Stats[Date < date, c("Date", "Win_p", "PPG", "PPG_vs", "PPG_diff", "Streak")]
frames[[i]]$Team_Stats <- frames[[i]]$Team_Stats[which.max(Date)]
frames[[i]]$Team_Stats[, Date := NULL]
colnames(frames[[i]]$Team_Stats) <- paste(colnames(frames[[i]]$Team_Stats), "TEAM_STATS", toupper(names(lineup$teams)[i]), sep = "_")
frames[[i]] <- bind_cols(frames[[i]])
}
?between
c(1,2,3,4,5,6,7,8) data.table::`%between%`(3, 5)
update_database("D:/MLB")
usethis::use_package("anytime")
usethis::use_package("magrittr")
document()
document()
warnings()
document()
warnings()
document()
document()
document()
library(mlbDatabase)
update_database("D:/MLB")
data.table::":="
document()
library(devtools)
document()
document()
update_database("D:/MLB")
library(mlbDatabase)
